name: Continuous Delivery

on:
  release:
    types: [published]

jobs:
  prepare-packages:
    runs-on: ubuntu-latest
    outputs:
      can-publish: ${{ steps.gate-releases.outputs.can-publish }}
      dist-committed-version: ${{ steps.gate-releases.outputs.dist-committed-version }}
      dist-directory: ${{ steps.gate-releases.outputs.dist-directory }}
      dist-is-prerelease: ${{ steps.gate-releases.outputs.dist-is-prerelease }}
      next-package-urls: ${{ steps.gate-releases.outputs.next-package-urls }}
      packages-to-publish: ${{ steps.gate-releases.outputs.packages-to-publish }}
      versions-validated: ${{ steps.check-package-versions.outputs.versions-validated }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version-file: .tool-versions
          registry-url: https://registry.npmjs.org/

      - name: Install CLI dependencies
        run: npm --workspace=@what3words/javascript-cli --include-workspace-root ci
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: Build CLI package
        run: npm --workspace=@what3words/javascript-cli run build

      - name: Check package versions
        id: check-package-versions
        run: |
          publishPaths=$(npm query .workspace --package-lock-only | jq -r 'map(select(.path | contains("packages")) | select(.private==false) | .path) | join(",")')
          npm exec \
          --workspace=@what3words/javascript-cli \
          --package-path=$publishPaths \
          -- gha-check-package-versions

      - name: Gate releases
        id: gate-releases
        run: |
          isPrerelease=$(jq -r '.["${{vars.DISTRIBUTION_PACKAGE}}"].isPrerelease' <<< '${{steps.check-package-versions.outputs.checked-package-versions}}')
          committedVersion=$(jq -r '.["${{vars.DISTRIBUTION_PACKAGE}}"].committedVersion' <<< '${{steps.check-package-versions.outputs.checked-package-versions}}')
          path=$(jq -r '.["${{vars.DISTRIBUTION_PACKAGE}}"].path' <<< '${{steps.check-package-versions.outputs.checked-package-versions}}')
          # we create newline separated raw strings to map iterate with xargs that runs the npm publish command: https://stackoverflow.com/a/50845457
          packagesToPublish=$(jq -rc 'with_entries(select(.value.isPrerelease=="false")) | keys' <<< '${{steps.check-package-versions.outputs.checked-package-versions}}')
          nextPackageUrls=$(jq -rc '. as $o | with_entries(.key |= "[" + . + "](https://www.npmjs.com/package/" + . + "/v/" + $o[.].committedVersion + ")") | keys | join("\n")' <<< '${{steps.check-package-versions.outputs.checked-package-versions}}')
          canPublish=$([[ "${{steps.check-package-versions.outputs.versions-validated}}" = "true" && -n $packagesToPublish ]] && echo "true" || echo "false")

          echo "can-publish=$canPublish" >> $GITHUB_OUTPUT
          echo "dist-committed-version=$committedVersion" >> $GITHUB_OUTPUT
          echo "dist-directory=$path" >> $GITHUB_OUTPUT
          echo "dist-is-prerelease=$isPrerelease" >> $GITHUB_OUTPUT
          echo "packages-to-publish=$packagesToPublish" >> $GITHUB_OUTPUT
          echo "next-package-urls="$nextPackageUrls"" >> $GITHUB_OUTPUT

  integration-tests:
    needs: prepare-packages
    if: needs.prepare-packages.outputs.versions-validated == 'true'
    uses: ./.github/workflows/ci.yml

  publish-npm:
    runs-on: ubuntu-latest
    needs:
      - integration-tests
      - prepare-packages
    if: needs.prepare-packages.outputs.versions-validated == 'true' && needs.prepare-packages.outputs.can-publish == 'true'

    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version-file: .tool-versions
          registry-url: https://registry.npmjs.org/

      - name: Restore npm dependencies cache
        id: cache-node-modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Build packages
        run: npm run build:packages

      - name: Publish packages
        id: publish-packages
        run: |
          jq -r 'join("\n")' <<< ${{needs.prepare-packages.outputs.packages-to-publish}} | xargs -n 1 --no-run-if-empty npm publish -w
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          NODE_AUTH_TOKEN: ${{ env.NPM_TOKEN }}

      - name: Publish packages status
        run: |
          echo "### Package(s) published! :gift:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Published package(s)" >> $GITHUB_STEP_SUMMARY
          echo ${{needs.prepare-packages.outputs.next-package-urls}} | xargs -n 1 echo >> $GITHUB_STEP_SUMMARY

  upload-distribution:
    runs-on: ubuntu-latest
    needs:
      - prepare-packages
      - integration-tests
    if: needs.prepare-packages.outputs.versions-validated == 'true'

    env:
      AWS_IAM_ROLE: ${{ secrets.AWS_IAM_ROLE }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AWS_S3_DIRECTORY: ${{ vars.AWS_S3_DIRECTORY }}
      DISTRIBUTION_PACKAGE: ${{ vars.DISTRIBUTION_PACKAGE }}

    strategy:
      fail-fast: true
      matrix:
        environment:
          - production
          - development
        exclude:
          # only patch/minor/major versions are published to the production environment
          - environment: ${{needs.prepare-packages.outputs.dist-is-prerelease == 'true' && 'production' }}

    environment: ${{ matrix.environment }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version-file: .tool-versions

      - name: Setup AWS-SDK
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_IAM_ROLE }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          unset-current-credentials: true

      - name: Restore npm dependencies cache
        id: cache-node-modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Build and upload distributions
        working-directory: ${{needs.prepare-packages.outputs.dist-directory}}
        run: |
          echo "::notice title=Building package::package=${{env.DISTRIBUTION_PACKAGE}}@${{needs.prepare-packages.outputs.dist-committed-version}}"
          npm run --workspace=${{env.DISTRIBUTION_PACKAGE}} build
          echo "::notice title=Uploading distributions::sources_path=${{needs.prepare-packages.outputs.dist-directory}}, target_path=${{ env.AWS_S3_DIRECTORY }}"
          aws s3 cp . s3://${{ env.AWS_S3_BUCKET }}/${{ env.AWS_S3_DIRECTORY }}@${{needs.prepare-packages.outputs.dist-committed-version}}/ --recursive --exclude "*" --include "dist/*" --include "loader/*"

      - name: Upload distribution status
        run: |
          echo "### Distribution uploaded! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Package: ${{env.DISTRIBUTION_PACKAGE}}@${{needs.prepare-packages.outputs.dist-committed-version}}" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{matrix.environment}}" >> $GITHUB_STEP_SUMMARY
